// <auto-generated />
using System;
using FADemo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FADemo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722035155_FA02")]
    partial class FA02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FADemo.Models.Account.ExtendIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetAlterMode", b =>
                {
                    b.Property<int>("AssetAlterModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetAlterModeId"));

                    b.Property<string>("AssetAlterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetAlterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("AssetAlterModeId");

                    b.ToTable("AssetAlterModes");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetDeprmetHod", b =>
                {
                    b.Property<int>("AssetDeprmetHodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetDeprmetHodId"));

                    b.Property<string>("AssetDeprmetDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetDeprmetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetDeproption")
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("AssetDeprmetHodId");

                    b.ToTable("AssetDeprmetHods");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetPosition", b =>
                {
                    b.Property<int>("AssetPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetPositionId"));

                    b.Property<string>("AssetPositionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetPositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetPositionId");

                    b.ToTable("AssetPositions");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetStatus", b =>
                {
                    b.Property<int>("AssetStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetStatusId"));

                    b.Property<string>("AssetStatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetStatusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.HasKey("AssetStatusId");

                    b.ToTable("AssetStatuses");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetTypeId"));

                    b.Property<DateTime>("AssetTypeCreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssetTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AssetTypeIsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("AssetTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetTypeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetTypeId");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("FADemo.Models.FixedAsset.AssetAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("AttachmentHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AttachmentUploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AttachmentUploadUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsAdd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.HasKey("AttachmentId");

                    b.ToTable("AssetAttachments");
                });

            modelBuilder.Entity("FADemo.Models.FixedAsset.AssetCreateBase", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"));

                    b.Property<int?>("AssetAlterModeId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetDeprmetHodId")
                        .HasColumnType("int");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetPositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssetRecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssetRecordUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BeginUseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeReferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastDeprmetHodDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.HasIndex("AssetAlterModeId");

                    b.HasIndex("AssetDeprmetHodId");

                    b.HasIndex("AssetPositionId");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeReferenceId");

                    b.ToTable("AssetCreateBases");
                });

            modelBuilder.Entity("FADemo.Models.FixedAsset.AssetUpdateDetail", b =>
                {
                    b.Property<int>("AssetUpdateDeteailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetUpdateDeteailId"));

                    b.Property<int?>("AssetAlterModeId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssetUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssetUpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentHashCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("IsUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetUpdateDeteailId");

                    b.HasIndex("AssetAlterModeId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetPositionId");

                    b.HasIndex("AssetStatusId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeReferenceId");

                    b.ToTable("AssetUpdateDetails");
                });

            modelBuilder.Entity("FADemo.Models.Organization.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FADemo.Models.Organization.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FADemo.Models.FixedAsset.AssetCreateBase", b =>
                {
                    b.HasOne("FADemo.Models.BaseInformation.AssetAlterMode", "AssetAlterMode")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("AssetAlterModeId");

                    b.HasOne("FADemo.Models.BaseInformation.AssetDeprmetHod", "AssetDeprmetHod")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("AssetDeprmetHodId");

                    b.HasOne("FADemo.Models.BaseInformation.AssetPosition", "AssetPosition")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("AssetPositionId");

                    b.HasOne("FADemo.Models.BaseInformation.AssetStatus", "AssetStatus")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("AssetStatusId");

                    b.HasOne("FADemo.Models.BaseInformation.AssetType", "AssetType")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FADemo.Models.Organization.Department", "Department")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("FADemo.Models.Organization.Employee", "Employee")
                        .WithMany("AssetCreateBase")
                        .HasForeignKey("EmployeeReferenceId");

                    b.Navigation("AssetAlterMode");

                    b.Navigation("AssetDeprmetHod");

                    b.Navigation("AssetPosition");

                    b.Navigation("AssetStatus");

                    b.Navigation("AssetType");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FADemo.Models.FixedAsset.AssetUpdateDetail", b =>
                {
                    b.HasOne("FADemo.Models.BaseInformation.AssetAlterMode", "AssetAlterMode")
                        .WithMany("AssetUpdateDetail")
                        .HasForeignKey("AssetAlterModeId");

                    b.HasOne("FADemo.Models.FixedAsset.AssetCreateBase", "AssetCreateBase")
                        .WithMany("AssetUpdateDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FADemo.Models.BaseInformation.AssetPosition", "AssetPosition")
                        .WithMany("AssetUpdateDetail")
                        .HasForeignKey("AssetPositionId");

                    b.HasOne("FADemo.Models.BaseInformation.AssetStatus", "AssetStatus")
                        .WithMany("AssetUpdateDetail")
                        .HasForeignKey("AssetStatusId");

                    b.HasOne("FADemo.Models.Organization.Department", "Department")
                        .WithMany("AssetUpdateDetail")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("FADemo.Models.Organization.Employee", "Employee")
                        .WithMany("AssetUpdateDetail")
                        .HasForeignKey("EmployeeReferenceId");

                    b.Navigation("AssetAlterMode");

                    b.Navigation("AssetCreateBase");

                    b.Navigation("AssetPosition");

                    b.Navigation("AssetStatus");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FADemo.Models.Organization.Employee", b =>
                {
                    b.HasOne("FADemo.Models.Organization.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FADemo.Models.Account.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FADemo.Models.Account.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FADemo.Models.Account.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FADemo.Models.Account.ExtendIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetAlterMode", b =>
                {
                    b.Navigation("AssetCreateBase");

                    b.Navigation("AssetUpdateDetail");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetDeprmetHod", b =>
                {
                    b.Navigation("AssetCreateBase");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetPosition", b =>
                {
                    b.Navigation("AssetCreateBase");

                    b.Navigation("AssetUpdateDetail");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetStatus", b =>
                {
                    b.Navigation("AssetCreateBase");

                    b.Navigation("AssetUpdateDetail");
                });

            modelBuilder.Entity("FADemo.Models.BaseInformation.AssetType", b =>
                {
                    b.Navigation("AssetCreateBase");
                });

            modelBuilder.Entity("FADemo.Models.FixedAsset.AssetCreateBase", b =>
                {
                    b.Navigation("AssetUpdateDetails");
                });

            modelBuilder.Entity("FADemo.Models.Organization.Department", b =>
                {
                    b.Navigation("AssetCreateBase");

                    b.Navigation("AssetUpdateDetail");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FADemo.Models.Organization.Employee", b =>
                {
                    b.Navigation("AssetCreateBase");

                    b.Navigation("AssetUpdateDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
